'use client'
import {Alert, Button, Form, Input, message, Modal, Space, Typography} from 'antd'
import {KeyOutlined, ReloadOutlined} from '@ant-design/icons'
import {useState} from 'react'
import {useAuthenticatedFetch} from '@/hooks/useAuthenticatedFetch'
import PrincipalCredentialsModal from './principal-credentials-modal'
import type {PrincipalWithCredentials} from './types/principal'

const {Text} = Typography

interface ResetPrincipalCredentialsModalProps {
  visible: boolean;
  principalName: string | null;
  onClose: () => void;
  onSuccess: () => void;
}

interface ResetFormValues {
  clientId?: string;
  clientSecret?: string;
}

export default function ResetPrincipalCredentialsModal({
                                                          visible,
                                                          principalName,
                                                          onClose,
                                                          onSuccess
                                                        }: ResetPrincipalCredentialsModalProps) {
  const [form] = Form.useForm<ResetFormValues>();
  const [loading, setLoading] = useState(false);
  const [showCredentials, setShowCredentials] = useState(false);
  const [resetPrincipal, setResetPrincipal] = useState<PrincipalWithCredentials | null>(null);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const {authenticatedFetch} = useAuthenticatedFetch();

  const handleSubmit = async (values: ResetFormValues) => {
    if (!principalName) return;

    setLoading(true);
    setErrorMessage(null);

    try {

      const payload: { clientId?: string; clientSecret?: string } = {};
      if (values.clientId) {
        payload.clientId = values.clientId;
      }
      if (values.clientSecret) {
        payload.clientSecret = values.clientSecret;
      }


      const data = await authenticatedFetch(`/api/principals/${encodeURIComponent(principalName)}/reset`, {
        method: 'POST',
        body: JSON.stringify(payload),
      });

      // @ts-ignore
      if (!data || data.error) {
        setErrorMessage(`Failed to reset credentials. ${data.error?.message}`);
        return;
      }


      const response = data as PrincipalWithCredentials;

      if (response.credentials) {
        form.resetFields();
        setErrorMessage(null);
        onClose();
        setResetPrincipal(response);
        setShowCredentials(true);
      } else {
        console.warn('No credentials in response - this is unexpected!');
        message.success('Credentials reset successfully (but no credentials returned)!');
        form.resetFields();
        setErrorMessage(null);
        onSuccess();
        onClose();
      }
    } catch (error) {
      console.error('Error resetting credentials:', error);
      setErrorMessage('An unexpected error occurred. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleCancel = () => {
    form.resetFields();
    setErrorMessage(null);
    onClose();
  };

  const handleCredentialsClose = () => {
    setShowCredentials(false);
    setResetPrincipal(null);
    onSuccess();
  };

  return (
      <>
        <Modal
            title={
              <Space>
                <ReloadOutlined/>
                Reset Credentials for &quot;{principalName}&quot;
              </Space>
            }
            open={visible}
            onCancel={handleCancel}
            footer={null}
            width={600}
            destroyOnHidden
            centered
        >
          <Form
              form={form}
              layout="vertical"
              onFinish={handleSubmit}
              autoComplete="off"
          >
            <Text type="secondary" style={{display: 'block', marginBottom: 16}}>
              Leave fields empty to generate random credentials, or provide custom values.
            </Text>

            {errorMessage && (
                <Alert
                    message="Error"
                    description={errorMessage}
                    type="warning"
                    showIcon
                    closable
                    onClose={() => setErrorMessage(null)}
                    style={{marginBottom: 16}}
                />
            )}

            <Form.Item
                label="Client ID (Optional)"
                name="clientId"
                tooltip="Optional client ID to set for the principal. Must be a valid client ID previously generated by this service."
            >
              <Input
                  prefix={<KeyOutlined/>}
                  placeholder="Leave empty for auto-generated client ID"
              />
            </Form.Item>

            <Form.Item
                label="Client Secret (Optional)"
                name="clientSecret"
                tooltip="Optional client secret to set for the principal. May have requirements on special chars, length, etc."
            >
              <Input.Password
                  prefix={<KeyOutlined/>}
                  placeholder="Leave empty for auto-generated secret"
              />
            </Form.Item>

            <Form.Item style={{marginBottom: 0}}>
              <Space style={{width: '100%', justifyContent: 'flex-end'}}>
                <Button onClick={handleCancel}>
                  Cancel
                </Button>
                <Button type="primary" htmlType="submit" loading={loading} icon={<ReloadOutlined/>}>
                  Reset Credentials
                </Button>
              </Space>
            </Form.Item>
          </Form>
        </Modal>

        {/* Credentials Display Modal */}
        <PrincipalCredentialsModal
            visible={showCredentials}
            principalData={resetPrincipal}
            onClose={handleCredentialsClose}
            title={resetPrincipal ? `Credentials reset for: "${resetPrincipal.principal.name}"` : 'Credentials Reset'}
        />
      </>
  );
}

